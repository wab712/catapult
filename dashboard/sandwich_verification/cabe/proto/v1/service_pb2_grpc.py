# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cabe.proto.v1 import service_pb2 as cabe_dot_proto_dot_v1_dot_service__pb2


class AnalysisStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAnalysis = channel.unary_unary(
        '/cabe.v1.Analysis/GetAnalysis',
        request_serializer=cabe_dot_proto_dot_v1_dot_service__pb2.GetAnalysisRequest.SerializeToString,
        response_deserializer=cabe_dot_proto_dot_v1_dot_service__pb2.GetAnalysisResponse.FromString,
        )


class AnalysisServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetAnalysis(self, request, context):
    """Get results of a performance experiment analysis.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AnalysisServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAnalysis': grpc.unary_unary_rpc_method_handler(
          servicer.GetAnalysis,
          request_deserializer=cabe_dot_proto_dot_v1_dot_service__pb2.GetAnalysisRequest.FromString,
          response_serializer=cabe_dot_proto_dot_v1_dot_service__pb2.GetAnalysisResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cabe.v1.Analysis', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
